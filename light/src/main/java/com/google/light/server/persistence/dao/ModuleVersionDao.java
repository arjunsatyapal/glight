/*
 * Copyright (C) Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.light.server.persistence.dao;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.light.server.utils.LightPreconditions.checkTxnIsRunning;

import com.google.light.server.dto.pojo.typewrapper.longwrapper.ModuleId;
import com.google.light.server.dto.pojo.typewrapper.longwrapper.Version;

import com.google.inject.Inject;
import com.google.light.server.dto.module.ModuleVersionDto;
import com.google.light.server.persistence.entity.module.ModuleEntity;
import com.google.light.server.persistence.entity.module.ModuleVersionEntity;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import java.util.logging.Logger;

/**
 * DAO for {@link ModuleEntity}.
 * 
 * @author Arjun Satyapal
 */
public class ModuleVersionDao extends AbstractBasicDao<ModuleVersionDto, ModuleVersionEntity> {
  private static final Logger logger = Logger.getLogger(ModuleVersionDao.class.getName());

  static {
    ObjectifyService.register(ModuleVersionEntity.class);
  }

  @Inject
  public ModuleVersionDao() {
    super(ModuleVersionEntity.class);
  }

  /**
   * Put Module on datastore. Id for {@link ModuleEntity} is generated by DataStore.
   * 
   * {@inheritDoc}
   */
  @Override
  public ModuleVersionEntity put(Objectify ofy, ModuleVersionEntity entity) {
    checkTxnIsRunning(ofy);
    checkNotNull(entity.getCreationTime(), "creationTime for ModuleVersionEntity is mandatory");
    

    ModuleVersionEntity returnEntity = super.put(ofy, entity);
    String returnMsg = "Created/Updated ModuleVersionEntity[" + returnEntity.getVersion() 
        + "], for Module[" + returnEntity.getKey().getId() + "].";

    return logAndReturn(logger, returnEntity, returnMsg);
  }

  /**
   * TODO(arjuns): Add test for this.
   * Fetch Module via ModuleId.
   */
  public ModuleVersionEntity get(Objectify ofy, ModuleId moduleId, Version version) {
    return get(ofy, ModuleEntity.generateKey(moduleId), version);
  }
  
  public ModuleVersionEntity get(Objectify ofy, Key<ModuleEntity> moduleKey, Version version) {
    return super.get(ofy, ModuleVersionEntity.generateKey(moduleKey, version));
  }
  
//  public ModuleVersionEntity findByModuleIdAndLastEditTime(Objectify ofy, ModuleId moduleId, 
//      Instant lastEditTime ) {
//    
//    // No record was found with etag filter. So now searching on all childs.
//    QueryResultIterable<ModuleVersionEntity> versionsIterable = ObjectifyUtils.getAllChildren(
//        ofy, ModuleEntity.generateKey(moduleId), ModuleVersionEntity.class);
//    QueryResultIterator<ModuleVersionEntity> iterator = versionsIterable.iterator();
//    
//    while(iterator.hasNext()) {
//      ModuleVersionEntity moduleVersion = iterator.next();
//      
//      
//      if (moduleVersion.getEtag().equals(etag)) {
//        return moduleVersion;
//      }
//    }
//    
//    // No version was found with given Etag.
//    return null;
//  }
}
