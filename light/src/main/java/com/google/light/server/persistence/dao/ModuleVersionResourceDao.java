/*
 * Copyright (C) Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.light.server.persistence.dao;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import com.google.light.server.dto.pojo.typewrapper.longwrapper.ModuleId;
import com.google.light.server.dto.pojo.typewrapper.longwrapper.Version;



import com.google.inject.Inject;
import com.google.light.server.persistence.entity.module.ModuleEntity;
import com.google.light.server.persistence.entity.module.ModuleVersionEntity;
import com.google.light.server.persistence.entity.module.ModuleVersionResourceEntity;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import java.util.logging.Logger;

/**
 * DAO for {@link ModuleEntity}.
 * 
 * @author Arjun Satyapal
 */
public class ModuleVersionResourceDao extends AbstractBasicDao<Object, ModuleVersionResourceEntity> {
  private static final Logger logger = Logger.getLogger(ModuleVersionResourceDao.class.getName());

  static {
    ObjectifyService.register(ModuleVersionResourceEntity.class);
  }

  @Inject
  public ModuleVersionResourceDao() {
    super(ModuleVersionResourceEntity.class);
  }

  /**
   * Put Module on datastore. Id for {@link ModuleEntity} is generated by DataStore.
   * 
   * {@inheritDoc}
   */
  @Override
  public ModuleVersionResourceEntity put(Objectify txn, ModuleVersionResourceEntity entity) {
    checkNotNull(txn, "Txn should not be null");
    checkArgument(txn.getTxn().isActive(), "Txn should be active for ModuleVersionEntity.");

    ModuleVersionResourceEntity returnEntity = super.put(txn, entity);
    String returnMsg = "Created/Updated ModuleVersionResourceEntity[" + returnEntity.getResourceId() 
        + "], for Module[" + returnEntity.getKey().getId() + "].";

    return logAndReturn(logger, returnEntity, returnMsg);
  }

  /**
   * TODO(arjuns): Add test for this.
   * Fetch Module via ModuleId.
   */
  public ModuleVersionResourceEntity get(ModuleId moduleId, Version moduleVersion, String id) {
    Key<ModuleEntity> moduleKey = ModuleEntity.generateKey(moduleId);
    Key<ModuleVersionEntity> moduleVersionKey = ModuleVersionEntity.generateKey(moduleKey, moduleVersion);
    return get(moduleVersionKey, id);
  }
  
  public ModuleVersionResourceEntity get(Key<ModuleVersionEntity> moduleVersionKey, String id) {
    return super.get(ModuleVersionResourceEntity.generateKey(moduleVersionKey, id));
  }
}
