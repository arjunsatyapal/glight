/*
 * Copyright (C) Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.google.light.server.persistence.dao;

import static com.google.common.base.Preconditions.checkArgument;
import static com.google.common.base.Preconditions.checkNotNull;

import com.google.appengine.api.datastore.QueryResultIterable;
import com.google.common.collect.Lists;
import com.google.inject.Inject;
import com.google.light.server.persistence.entity.queue.importflow.ImportJobEntity;
import com.google.light.server.persistence.entity.queue.importflow.ImportStageDetailEntity;
import com.google.light.server.utils.ObjectifyUtils;
import com.googlecode.objectify.Key;
import com.googlecode.objectify.Objectify;
import com.googlecode.objectify.ObjectifyService;
import java.util.List;
import java.util.logging.Logger;

/**
 * DAO for {@link ImportStageDetailEntity}.
 * 
 * @author Arjun Satyapal
 */
public class ImportStageDetailDao extends AbstractBasicDao<Object, ImportStageDetailEntity> {
  private static final Logger logger = Logger.getLogger(ImportStageDetailDao.class.getName());

  static {
    ObjectifyService.register(ImportStageDetailEntity.class);
  }

  @Inject
  public ImportStageDetailDao() {
    super(ImportStageDetailEntity.class);
  }

  /**
   * Put {@link ImportEntity} on datastore. Id for {@link ImportEntity} is generated by DataStore.
   */
  @Override
  public ImportStageDetailEntity put(Objectify txn, ImportStageDetailEntity entity) {
    String errMsg = "ImportStageDetails entities should be put inside an active transaction.";
    checkNotNull(txn, errMsg);
    checkArgument(txn.getTxn().isActive(), errMsg);

    ImportStageDetailEntity returnEntity = super.put(txn, entity);
    String logMsg =
        "ImportStage[" + entity.getImportStage() + " created for ImportEntity["
            + entity.getImportEntityKey().getId() + "].";
    return logAndReturn(logger, returnEntity, logMsg);
  }

  /**
   * Fetch {@link ImportStageDetailEntity} from DataStore.
   * 
   * @param id
   * @return
   */
  public ImportStageDetailEntity get(Key<ImportJobEntity> importEntityKey, Long id) {
    Key<ImportStageDetailEntity> key = ImportStageDetailEntity.generateKey(importEntityKey, id);

    return super.get(key);
  }

  /**
   * Delete {@link ImportStageDetailEntity} from DataStore.
   * 
   * @param id
   */
  public void delete(Key<ImportJobEntity> importEntityKey, Long id) {
    Key<ImportStageDetailEntity> key = ImportStageDetailEntity.generateKey(importEntityKey, id);

    super.delete(key);
  }

  /**
   * Fetch all importStageDetails for an {@link ImportEntity}.
   * 
   * @param importEntityKey
   * @return
   */
  public List<ImportStageDetailEntity> getAllStages(Key<ImportJobEntity> importEntityKey) {
    QueryResultIterable<ImportStageDetailEntity> importStageList =
        ObjectifyUtils.getAllChildren(ObjectifyUtils.nonTransaction(), importEntityKey,
            ImportStageDetailEntity.class);

    return Lists.newArrayList(importStageList.iterator());
  }
}
