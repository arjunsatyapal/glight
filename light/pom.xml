<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <!-- The Basics -->
  <groupId>com.google.light</groupId>
  <artifactId>light</artifactId>
  <version>1.0-SNAPSHOT</version>

  <packaging>war</packaging>

  <name>${gaeApplicationName}</name>

  <repositories>
    <!--
      Objectify Repository.
    -->
    <repository>
      <id>objectify-appengine</id>
      <name>Objectify Maven Repository</name>
      <url>http://objectify-appengine.googlecode.com/svn/maven</url>
    </repository>

    <!--
      JSTestDriver Repository.
    -->
    <repository>
      <id>jstd-maven-plugin google code repo</id>
      <url>http://jstd-maven-plugin.googlecode.com/svn/maven2</url>
    </repository>

    <!--
      Jackson Repository.
    -->
    <repository>
      <id>codehaus-snapshots</id>
      <url>http://snapshots.repository.codehaus.org</url>
    </repository>
  </repositories>
  <pluginRepositories>
    <pluginRepository>
      <id>jstd-maven-plugin google code repo</id>
      <url>http://jstd-maven-plugin.googlecode.com/svn/maven2</url>
    </pluginRepository>
  </pluginRepositories>

  <dependencies>

    <!--
      AppEngine Dependency :
      jars from GAE's "lib/user" must be added as compile-time dependencies,
      as described here in "Copying JARs" section:
      http://code.google.com/appengine/docs/java/tools/ant.html
    -->

    <dependency>
      <groupId>javax.persistence</groupId>
      <artifactId>persistence-api</artifactId>
      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-1.0-sdk</artifactId>
      <version>${gae.version}</version>
    </dependency>

    <!--
      Appengine Dependency :
      J2EE Servlet API. We need it to compile IndexServlet class.
      You can probably remove it, if you don't explicitly use Servlets.
    -->
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-servlet_2.5_spec</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <!--
      AppEngine Dependency :
      Scope = Test.
      GAE libraries for local testing as described here:
      http://code.google.com/appengine/docs/java/howto/unittesting.html
    -->
    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-labs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-stubs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-testing</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Apache Commons Dependencies : -->
    <dependency>
      <groupId>org.apache.directory.studio</groupId>
      <artifactId>org.apache.commons.lang</artifactId>
      <version>2.6</version>
    </dependency>

    <dependency>
      <groupId>commons-validator</groupId>
      <artifactId>commons-validator</artifactId>
      <version>1.4.0</version>
    </dependency>

    <!--
      Google API Dependency :
    -->
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client</artifactId>
      <version>1.6.0-beta</version>
    </dependency>

    <dependency>
      <groupId>com.google.api-client</groupId>
      <artifactId>google-api-client</artifactId>
      <version>1.6.0-beta</version>
    </dependency>

    <!--
      Guava Dependency :
      TODO(arjuns) : Some of the library depend on r09. So not using r11. Update this with that culprit.
    -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>11.0.2</version>
    </dependency>

    <!--
      Guice Dependency : Guice + Guice Servlet Extension.
    -->
    <dependency>
      <groupId>com.google.inject</groupId>
      <artifactId>guice</artifactId>
      <version>3.0</version>
    </dependency>

    <dependency>
      <groupId>com.google.inject.extensions</groupId>
      <artifactId>guice-servlet</artifactId>
      <version>3.0</version>
    </dependency>

    <!--
      JAXB Dependencies :
      Used for converting DTO to Json and XML.
    -->
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>2.2.5</version>
    </dependency>

    <!--
      Joda Time Dependency :
    -->
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>2.0</version>
    </dependency>

    <!--
      Json Dependency :
    -->
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.9.5</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-xc</artifactId>
      <version>1.9.0</version>
    </dependency>

    <!--
      JSP Dependency :
      Make use of JSP tags. Remove, if you don't use JSPs.
    -->
    <dependency>
      <artifactId>standard</artifactId>
      <groupId>taglibs</groupId>
      <version>1.1.2</version>
      <type>jar</type>
      <scope>runtime</scope>
    </dependency>

    <!-- JSTestDriver -->
    <dependency>
      <groupId>com.googlecode.jstd-maven-plugin</groupId>
      <artifactId>jstd-maven-plugin</artifactId>
      <version>${jstd.plugin.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.googlecode.jstd-maven-plugin</groupId>
      <artifactId>jstestdriver-jar</artifactId>
      <version>${jstd.version}</version>
      <scope>test</scope>
    </dependency>

    <!--
      Junit Dependency :
      Scope = Test Only.
    -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.10</version>
      <scope>test</scope>
    </dependency>
    <!--
      Logging Dependency : These dependencies are here just for enabling logging.
      TODO(arjuns): may be good for use to wrap all different logging frameworks.
    -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.0</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>0.9.22</version>
    </dependency>

    <!--
      Objectify Dependency :
      Scope : Production.
    -->
    <dependency>
      <groupId>com.googlecode.objectify</groupId>
      <artifactId>objectify</artifactId>
      <version>3.1</version>
    </dependency>
  </dependencies>

  <build>
    <extensions>
      <extension>
        <groupId>org.apache.maven.archetype</groupId>
        <artifactId>archetype-packaging</artifactId>
        <version>2.0-alpha-5</version>
      </extension>
    </extensions>

    <plugins>

      <plugin>
        <artifactId>maven-archetype-plugin</artifactId>
        <version>2.0-alpha-4</version>
        <extensions>true</extensions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.1-beta-1</version>
        <configuration>
          <webResources>
            <resource>
              <directory>src/main/webapp</directory>
              <filtering>true</filtering>
              <includes>
                <include>**/appengine-web.xml</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <!-- Maven : For running tests in parallel. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.12</version>
        <configuration>
          <parallel>methods</parallel>
          <threadCount>10</threadCount>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>2.12</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Maven : For running integration tests. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.12</version>
        <configuration>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
        The actual maven-gae-plugin. Type "mvn gae:run" to run project,
        "mvn gae:deploy" to upload to GAE.
      -->
      <plugin>
        <groupId>net.kindleit</groupId>
        <artifactId>maven-gae-plugin</artifactId>
        <version>0.9.2</version>
        <configuration>
          <serverId>appengine.google.com</serverId>
          <appDir>${basedir}/target/${gaeApplicationName}-1.0-SNAPSHOT</appDir>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>net.kindleit</groupId>
            <artifactId>gae-runtime</artifactId>
            <version>${gae.version}</version>
            <type>pom</type>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id />
            <phase>validate</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
          </execution>

          <execution>
            <id>gae:start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>stop</goal>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>gae:stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>

        </executions>
      </plugin>

      <!--
        Upload application to the appspot automatically, during
        release:perform.
      -->
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <goals>gae:deploy</goals>
        </configuration>
      </plugin>

      <!--
        Code Coverage Plugin : For code coverage.
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.5.1</version>
        <configuration>
          <formats>
            <format>xml</format>
            <format>html</format>
          </formats>
        </configuration>
        <executions>
          <execution>
            <phase>verify</phase>
            <goals>
              <goal>cobertura</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--
        Java compiler version
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.0</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
    </plugins>

    <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence
      on the Maven build itself. -->
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>net.kindleit</groupId>
                    <artifactId>maven-gae-plugin</artifactId>
                    <versionRange>[0.1,)</versionRange>
                    <goals>
                      <goal>unpack</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <execute />
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>org.mortbay.jetty</groupId>
                    <artifactId>maven-jetty-plugin</artifactId>
                    <versionRange>[6.1.26,)</versionRange>
                    <goals>
                      <goal>run</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>eu.numberfour.maven.plugins</groupId>
                    <artifactId>file-list-maven-plugin</artifactId>
                    <versionRange>[1.0.0,)</versionRange>
                    <goals>
                      <goal>list</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore></ignore>
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>

  <reporting>
    <plugins>
      <!--
        Project Info Plugin : For generating Project Site.
      -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>2.4</version>
        <!-- <configuration>
          <dependencyLocationsEnabled>false</dependencyLocationsEnabled>
          <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
          </configuration>
        -->
      </plugin>

      <!--
        Cobertura Plugin : For Code Coverage.
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>2.5.1</version>
        <configuration>
          <formats>
            <format>xml</format>
            <format>html</format>
          </formats>
        </configuration>
      </plugin>

      <!--
        Surefire Plugin : Include Unit-Tests in reports.
      -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.12</version>
        <configuration>
          <alwaysGenerateSurefireReport>true</alwaysGenerateSurefireReport>
          <reportsDirectories>
            <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          </reportsDirectories>
        </configuration>
        <reportSets>
          <reportSet>
            <reports>
              <!--
                Surefire plugin has a bug which runs test even for report-only. So depending
                on failsafe-report-only where tests are not run.
              -->
              <report>failsafe-report-only</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!--
        Surefire Plugin : Include Integration tests report. Failsafe Plugin inherits
        from Surefire plugin but does not hcange the output file name. So we are
        specifically putting configuration for both : Surefire and Failsafe.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.12</version>
        <configuration>
          <alwaysGenerateFailsafeReport>true</alwaysGenerateFailsafeReport>
          <reportsDirectories>
            <reportsDirectory>${project.build.directory}/failsafe-reports</reportsDirectory>
          </reportsDirectories>
        </configuration>
        <reportSets>
          <reportSet>
            <reports>
              <report>failsafe-report-only</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>
    </plugins>
  </reporting>

  <!--
    Specify hard-coded project properties here.
  -->
  <properties>

    <!-- Sets the project's default encoding.
      http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!--
      This is just for "eclipse:eclipse" goal to always attempt downloading
      sources.
    -->
    <downloadSources>true</downloadSources>

    <!--
      Specify AppEngine version for your project. It should match
      SDK version pointed to by ${gae.home} property (Typically, one used
      by your Eclipse plug-in).
    -->
    <gae.version>1.6.3</gae.version>
    <gae.wait>false</gae.wait>

    <!--
      GAE Application Name.
    -->
    <gaeApplicationName>light</gaeApplicationName>

    <!--
      Upload to http://test.latest.<applicationName>.appspot.com by
      default.
    -->
    <gae.application.version>test</gae.application.version>

    <!-- JSTestDriver properties -->
    <jstd.plugin.version>1.3.2.5</jstd.plugin.version>
    <jstd.version>1.3.4-a</jstd.version>
  </properties>

  <profiles>

    <!-- Jasmine profile (use it when not running JSTestDriver) -->
    <profile>
      <id>jasmine</id>
      <activation>
        <property>
          <name>!jstd.server</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- Jasmine Runner -->
          <plugin>
            <groupId>com.github.searls</groupId>
            <artifactId>jasmine-maven-plugin</artifactId>
            <version>1.1.0</version>
            <executions>
              <execution>
                <phase>test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <debug>true</debug>
              <!--
                Currently Jasmine only supports RequireJS AMD loader, but we are using the dojo one.
                So, we made an little adapter that can be found at src/test/webapp/jsTest/loaderForJasmineMaven.js
              -->
              <specRunnerTemplate>REQUIRE_JS</specRunnerTemplate>
              <!--
                Plugin Bug warning!

                Jasmine plugin assumes that the script loader path is relative to jsSrcDir, but
                we are storing our fake loader at src/test/webapp/jsTest/loaderForJasmineMaven.js.
                That's why we need all the "../". But, if you notice it has more "../" then necessary.
                That's because of a plugin bug.
              -->
              <scriptLoaderPath>../../../../../src/test/webapp/jsTest/loaderForJasmineMaven.js</scriptLoaderPath>
              <!--
                Uncomment that to use Firefox instead of HTMLUnit
                <webDriverClassName>org.openqa.selenium.firefox.FirefoxDriver</webDriverClassName>
              -->
              <jsSrcDir>${project.basedir}/src/main/webapp/js</jsSrcDir>
              <jsTestSrcDir>${project.basedir}/src/test/webapp/jsTest</jsTestSrcDir>

              <!--
                This next two specs are used to determine the name of the directories inside
                target/jasmine where the source and the tests will be stored.

                We try to mimic the same structure of the project baseDir, so our
                configurations for the dojoLoader can be the same regardless of which tool
                we are using (jasmine:bdd, jasmine:test or JSTestDriver).
              -->
              <srcDirectoryName>src/main/webapp/js</srcDirectoryName>
              <specDirectoryName>src/test/webapp/jsTest</specDirectoryName>

              <!-- Don't include any file by default, let Dojo Loader load them when needed -->
              <sourceExcludes>
                <exclude>**</exclude>
              </sourceExcludes>

              <!-- Auto load all of our tests -->
              <specIncludes>
                <include>lightTest/**/*Test.js</include>
              </specIncludes>

            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!--
      Profile for running JSTestsDriver with an server with captured browsers.
      Note: it needs to be http://localhost:PORT for now. It does not work with
      remote servers.
    -->
    <profile>
      <id>jstestdriver</id>
      <activation>
        <property>
          <name>jstd.server</name>
        </property>
      </activation>
      <build>
        <plugins>
          <!-- JSTestDriver -->
          <plugin>
            <groupId>com.googlecode.jstd-maven-plugin</groupId>
            <artifactId>jstd-maven-plugin</artifactId>
            <version>${jstd.plugin.version}</version>
            <configuration>
              <config>src/test/webapp/jsTest/jsTestDriver.conf</config>
              <groupId>com.googlecode.jstd-maven-plugin</groupId>
              <artifactId>jstestdriver-jar</artifactId>
              <reset>true</reset>
              <server>${jstd.server}</server>
            </configuration>
            <executions>
              <execution>
                <id>run-tests</id>
                <phase>test</phase>
                <goals>
                  <goal>test</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <!-- Listing test files to be loaded by JSTestDriver -->
          <plugin>
            <groupId>eu.numberfour.maven.plugins</groupId>
            <artifactId>file-list-maven-plugin</artifactId>
            <version>1.0.0</version>
            <executions>
              <execution>
                <id>list-js-test-files</id>
                <phase>test-compile</phase>
                <goals>
                  <goal>list</goal>
                </goals>
                <configuration>
                  <baseDir>${project.basedir}/src/test/webapp/jsTest</baseDir>
                  <includes>
                    <include>**/*Test.js</include>
                  </includes>
                  <outputFile>${project.basedir}/target/testList.js</outputFile>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <!-- Jetty to serve stuff to JSTestDriver (needs to go after JSTestDriver
            so the server will be stopped at the right moment) -->
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>maven-jetty-plugin</artifactId>
            <version>6.1.26</version>
            <configuration>
              <scanIntervalSeconds>5</scanIntervalSeconds>
              <stopPort>9966</stopPort>
              <stopKey>foo</stopKey>
              <webXml>src/test/webapp/jsTest/dummyWeb.xml</webXml>
              <contextPath>/</contextPath>
              <webAppSourceDirectory>.</webAppSourceDirectory>
              <connectors>
                <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                  <port>9980</port>
                  <maxIdleTime>60000</maxIdleTime>
                </connector>
              </connectors>
            </configuration>
            <executions>
              <execution>
                <id>start-jetty</id>
                <phase>test-compile</phase>
                <goals>
                  <goal>run</goal>
                </goals>
                <configuration>
                  <daemon>true</daemon>
                </configuration>
              </execution>
              <execution>
                <id>test</id>
                <phase>test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!--
      We can configure our integration server to activate this profile
      and perform gae:deploy, thus uploading latest snapshot to the
      http://1.latest.<applicationName>.appspot.com automatically.
    -->
    <profile>
      <id>integration-build</id>
      <properties>
        <gae.application.version>stage</gae.application.version>
      </properties>
    </profile>

    <!--
      This profile will activate automatically during release and
      upload application to the http://2.latest.<applicationName>.appspot.com
      (We might want to set the 2nd version as our applications Default version to
      be accessible at http://<applicationName>.appspot.com).
      TODO(arjuns) : See if this can be used.
    -->
    <profile>
      <id>release-build</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>

      <properties>
        <!--
          During release, set application version in appengine-web.xml
          to 2.
        -->
        <gae.application.version>release</gae.application.version>

      </properties>
    </profile>
  </profiles>

</project>
