<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- The Basics -->
  <groupId>com.google.light</groupId>
  <artifactId>lightapp</artifactId>
  <version>1.0-SNAPSHOT</version>

  <packaging>war</packaging>

  <name>${gaeApplicationName}</name>

  <repositories>
    <repository>
      <id>objectify-appengine</id>
      <name>Objectify Maven Repository</name>
      <url>http://objectify-appengine.googlecode.com/svn/maven</url>
    </repository>
  </repositories>

  <dependencies>
    <!--
      jars from GAE's "lib/user" must be added as compile-time dependencies,
      as described here in "Copying JARs" section:
      http://code.google.com/appengine/docs/java/tools/ant.html
    -->

    <dependency>
      <groupId>javax.persistence</groupId>
      <artifactId>persistence-api</artifactId>
      <version>1.0</version>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-1.0-sdk</artifactId>
      <version>${gae.version}</version>
    </dependency>

    <!--
      J2EE Servlet API. We need it to compile IndexServlet class.
      You can probably remove it, if you don't explicitly use Servlets.
    -->
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-servlet_2.5_spec</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.googlecode.objectify</groupId>
      <artifactId>objectify</artifactId>
      <version>2.2.2</version>
    </dependency>

    <!--
      Make use of JSP tags. Remove, if you don't use JSPs.
    -->
    <dependency>
      <artifactId>standard</artifactId>
      <groupId>taglibs</groupId>
      <version>1.1.2</version>
      <type>jar</type>
      <scope>runtime</scope>
    </dependency>

    <!--
      These dependencies are here just for enabling logging.
    -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.0</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>0.9.22</version>
    </dependency>

    <!-- Test scope -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.5</version>
      <scope>test</scope>
    </dependency>

    <!--
      GAE libraries for local testing as described here:
      http://code.google.com/appengine/docs/java/howto/unittesting.html
    -->
    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-labs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-stubs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-testing</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <!--
      Unoffical Google Closure Plugins.
      In case it errors out, checkout and do mvn install for the Unoffical Plugins.
    -->
    <dependency>
      <groupId>com.google</groupId>
      <artifactId>closure.linter.unofficial.plugin</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>com.google</groupId>
      <artifactId>closure.templates.unofficial.plugin</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>

    <dependency>
      <groupId>com.google</groupId>
      <artifactId>closure.library.unofficial.plugin</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
  </dependencies>

  <build>
    <extensions>
      <extension>
        <groupId>org.apache.maven.archetype</groupId>
        <artifactId>archetype-packaging</artifactId>
        <version>2.0-alpha-5</version>
      </extension>
    </extensions>

    <plugins>
      <plugin>
        <artifactId>maven-archetype-plugin</artifactId>
        <version>2.0-alpha-4</version>
        <extensions>true</extensions>
      </plugin>

      <!--
        The actual maven-gae-plugin. Type "mvn gae:run" to run project,
        "mvn gae:deploy" to upload to GAE.
      -->
      <plugin>
        <groupId>net.kindleit</groupId>
        <artifactId>maven-gae-plugin</artifactId>
        <version>0.9.2</version>
      </plugin>

      <!--
        Upload application to the appspot automatically, during
        release:perform.
      -->
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <goals>gae:deploy</goals>
        </configuration>
      </plugin>

      <!--
        Java compiler version
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.0</version>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>

      <!--
        First performing Lint checks using Unoffical Closure-Linter Plugin.
        At present we are doing lint checks only for User Generated Scripts.
      -->
      <plugin>
        <groupId>com.google</groupId>
        <artifactId>closure.linter.unofficial.plugin</artifactId>
        <version>1.0-SNAPSHOT</version>

        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>closure-linter</goal>
            </goals>
            <configuration>
              <srcDir>src/main/scripts</srcDir>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
        Then compiling Soy to JS using Unoffical Closure-Templates Plugin.
        Output is sent to destDir which in this case is target/generated.
      -->
      <plugin>
        <groupId>com.google</groupId>
        <artifactId>closure.templates.unofficial.plugin</artifactId>
        <version>1.0-SNAPSHOT</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>closure-templates</goal>
            </goals>
            <configuration>
              <srcDir>src/main/scripts</srcDir>
              <destDir>target/generated/soy</destDir>
              <soyToJsSrcCompilerDir>${closure.templates.lib.dir}</soyToJsSrcCompilerDir>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
        Now calculating dependencey for all JS.
      -->
      <plugin>
        <groupId>com.google</groupId>
        <artifactId>closure.library.unofficial.plugin</artifactId>
        <version>1.0-SNAPSHOT</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>closure-library</goal>
            </goals>
            <configuration>
              <roots>
                <param>${basedir}/src/main/scripts</param>
                <param>${basedir}/target/generated/soy</param>
              </roots>
              <destDir>target/generated/js/</destDir>
              <closureLibrary>${closure.lib.dir}</closureLibrary>
              <closureTemplatesLibrary>${closure.templates.lib.dir}</closureTemplatesLibrary>
              <outputMode>list</outputMode>
              <namespaces>
                <param>goog.light</param>
                <param>goog.light.templates</param>
              </namespaces>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
        Now handling all the JS for Closure.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.1-beta-1</version>
        <configuration>
          <webResources>
            <resource>
              <directory>src/main/webapp</directory>
              <filtering>true</filtering>
              <includes>
                <include>**/appengine-web.xml</include>
              </includes>
            </resource>

            <resource>
              <directory>target/generated/js</directory>
            </resource>
            <resource>
              <directory>target/generated/soy</directory>
            </resource>
          </webResources>
          <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
        </configuration>
        <executions>
          <execution>
            <id>write-deps</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>war</goal>
            </goals>
            <configuration>
              <!-- Make sure to include only the JavaScript source files -->
              <warSourceIncludes>**/*.js</warSourceIncludes>
              <dependencyWarIncludes>**/*.js</dependencyWarIncludes>
              <!-- Exclude everything from the final WAR file, as we won't use it -->
              <!-- <packagingExcludes>**/*</packagingExcludes> -->
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <!--
    Specify hard-coded project properties here.
  -->
  <properties>

    <!-- Sets the project's default encoding.
      http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!--
      This is just for "eclipse:eclipse" goal to always attempt downloading
      sources.
    -->
    <downloadSources>true</downloadSources>

    <!--
      Specify AppEngine version for your project. It should match
      SDK version pointed to by ${gae.home} property (Typically, one used by your
      Eclipse plug-in).
    -->
    <gae.home>/Users/arjuns/appengine-java-sdk-1.6.1</gae.home>
    <gaepluginversion>0.9.2</gaepluginversion>
    <gae.version>1.6.1</gae.version>
    <gaeApplicationName>Light</gaeApplicationName>

    <!--
      Upload to http://test.latest.<applicationName>.appspot.com by
      default.
    -->
    <gae.application.version>test</gae.application.version>

    <!--
      Path to closurebuilder.py
    -->
    <closure.builder.dir>/Users/arjuns/google-closure/closure-library/closure-library-20111110-r1376</closure.builder.dir>
    <closure.compiler.dir>/Users/arjuns/google-closure/closure-compiler/r1592/compiler-20111114</closure.compiler.dir>
    <closure.templates.lib.dir>/Users/arjuns/google-closure/closure-templates/closure-templates-for-javascript-2011-22-12</closure.templates.lib.dir>
    <closure.lib.dir>/Users/arjuns/google-closure/closure-library/closure-library-20111110-r1376</closure.lib.dir>
    <js.dir>${basedir}/src/main/webapp/learnclosure/</js.dir>
    <generated.js.dir>${basedir}/target/generated</generated.js.dir>
  </properties>

  <profiles>
    <!--
      We can configure our integration server to activate this profile
      and perform gae:deploy, thus uploading latest snapshot to the
      http://1.latest.<applicationName>.appspot.com automatically.
    -->
    <profile>
      <id>integration-build</id>
      <properties>
        <gae.application.version>stage</gae.application.version>
      </properties>
    </profile>

    <!--
      This profile will activate automatically during release and
      upload application to the http://2.latest.<applicationName>.appspot.com (We
      might want to set the 2nd version as our applications Default version to
      be accessible at http://<applicationName>.appspot.com).
    -->
    <profile>
      <id>release-build</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>

      <properties>
        <!--
          During release, set application version in appengine-web.xml
          to 2.
        -->
        <gae.application.version>release</gae.application.version>
      </properties>
    </profile>
  </profiles>

</project>
